{
  "experiment_run": {
    "experiment_id": "1daacbb9-4d52-4180-9cf2-c5103ed47216",
    "variant_name": "loss_only",
    "model_name": "feawad",
    "model_imp": "Official",
    "architecture": "AE",
    "config_type": "feawad_default_configs",
    "model_cate": "benchmark",
    "description": "FEAWAD experiment with loss_only on shuttle"
  },
  "datasets": {
    "experiment_id": "1daacbb9-4d52-4180-9cf2-c5103ed47216",
    "contamination_rate": 0.02,
    "shuffle": {
      "train": false,
      "test": false
    },
    "split": {
      "train": 0.8,
      "test": 0.2,
      "stratify": true
    },
    "preprocessing": {
      "numerical": "minmax",
      "categorical": "onehot",
      "handle_missing": true
    },
    "name": "shuttle",
    "input_dim": 9,
    "N": 49097,
    "anomaly_ratio": 0.08,
    "weakly_supervision": 30
  },
  "training": {
    "random_seed": 42,
    "pre_training": {
      "enabled": true,
      "dataset": "normal_only",
      "optimizer": {
        "name": "Adam",
        "lr": 0.0001
      },
      "clipnorm": null,
      "loss": "mean_squared_error",
      "batch_size": 512,
      "steps_per_epoch": 20,
      "epochs": 100
    },
    "main_training": {
      "enabled": true,
      "dataset": "mixed",
      "optimizer": {
        "name": "Adam",
        "lr": 0.0001
      },
      "clipnorm": null,
      "loss": "feawad_multi_loss",
      "batch_size": 512,
      "steps_per_epoch": 20,
      "epochs": 30
    },
    "checkpoint": {
      "save_best_only": true,
      "save_weights_only": true
    },
    "experiment_id": "1daacbb9-4d52-4180-9cf2-c5103ed47216"
  },
  "evaluation": {
    "runs": 10,
    "random_seeds": [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9
    ],
    "metrics": [
      "auc",
      "ap"
    ],
    "mode": "weakly_supervised",
    "experiment_id": "1daacbb9-4d52-4180-9cf2-c5103ed47216"
  },
  "model": {
    "experiment_id": "1daacbb9-4d52-4180-9cf2-c5103ed47216",
    "variant": "loss_only",
    "model_name": "feawad",
    "encoder_type": "ae_split",
    "freeze_encoder": true,
    "pre_training": true,
    "dataset_name": "shuttle",
    "input_dim": 9,
    "latent_dim": 64,
    "features": [
      "latent_z"
    ],
    "encoder": [
      {
        "type": "Input",
        "units": 9,
        "model": "fixed"
      },
      {
        "type": "Dense",
        "units": 9,
        "activation": "relu",
        "initializer": "glorot_normal",
        "use_bias": true,
        "name": "ain"
      },
      {
        "type": "Dense",
        "units": 128,
        "activation": "relu",
        "initializer": "glorot_normal",
        "use_bias": true,
        "name": "ae1"
      },
      {
        "type": "Dense",
        "units": "latent_dim",
        "activation": "relu",
        "initializer": "glorot_normal",
        "use_bias": true,
        "name": "ae2"
      }
    ],
    "decoder": [
      {
        "type": "Input",
        "units": "latent_dim",
        "model": "fixed"
      },
      {
        "type": "Dense",
        "units": 128,
        "activation": "relu",
        "initializer": "glorot_normal",
        "use_bias": true,
        "name": "ad1"
      },
      {
        "type": "Dense",
        "units": 9,
        "activation": "relu",
        "initializer": "glorot_normal",
        "use_bias": true,
        "name": "ad2"
      }
    ],
    "scoring_network": [
      {
        "type": "Input",
        "units": 9,
        "model": "fixed"
      },
      {
        "units": 256,
        "activation": "relu",
        "initializer": "glorot_normal",
        "use_bias": true
      },
      {
        "units": 32,
        "activation": "relu",
        "initializer": "glorot_normal",
        "use_bias": true
      },
      {
        "units": "output_dim",
        "activation": "linear",
        "initializer": "glorot_normal",
        "use_bias": true,
        "name": "score"
      }
    ],
    "loss_function": {
      "name": "multi_loss",
      "description": "Margin-based confidence loss combining inlier, outlier, and reconstruction terms",
      "formula": "(1 - y_true) * (|y_pred| + ||residual||) + y_true * (|max(margin - y_pred, 0)| + |max(margin - ||residual||, 0)|)",
      "hyperparams": {
        "confidence_margin": 5.0
      }
    }
  }
}